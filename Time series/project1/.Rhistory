rownames(AICcs) = c("SARIMA(0,1,0)","SARIMA(1,1,0)","SARIMA(2,1,0)",
"SARIMA(0,1,1)","SARIMA(1,1,1)","SARIMA(2,1,1)",
"SARIMA(0,1,2)","SARIMA(1,1,2)","SARIMA(2,1,2)")
colnames(AICcs) = c("(1,1,1)","(2,1,1)","(3,1,1)",
"(1,1,2)","(2,1,2)","(3,1,2)",
"(1,1,3)","(2,1,3)","(3,1,3)")
i
j
?Arima
# model selection
AICc = 3000
arimalist = list(c(0,1,0),c(1,1,0),c(2,1,0),c(0,1,1),c(1,1,1),c(2,1,1),c(0,1,2),c(1,1,2),c(2,1,2))
seasonallist = list(c(1,1,1),c(2,1,1),c(3,1,1),c(1,1,2),c(2,1,2),c(3,1,2),c(1,1,3),c(2,1,3),c(3,1,3))
AICcs = matrix(NA,length(arimalist),length(seasonallist))
for(i in 1:length(arimalist)){
for(j in 1:length(seasonallist)){
if(0){
fit = list()
fit$aicc = NA
}
else{
fit = Arima(train1,order=arimalist[[i]],
seasonal = seasonallist[[j]],method = "ML")
AICcs[i,j] = fit$aicc
if(fit$aicc < AICc){
AICc = fit$aicc
}
}
}
}
i
j
# model selection
AICc = 3000
arimalist = list(c(0,1,0),c(1,1,0),c(2,1,0),c(0,1,1),c(1,1,1),c(2,1,1),c(0,1,2),c(1,1,2),c(2,1,2))
seasonallist = list(c(1,1,1),c(2,1,1),c(3,1,1),c(1,1,2),c(2,1,2),c(3,1,2),c(1,1,3),c(2,1,3),c(3,1,3))
AICcs = matrix(NA,length(arimalist),length(seasonallist))
for(i in 1:length(arimalist)){
for(j in 1:length(seasonallist)){
result = tryCatch({
fit = Arima(train1,order=arimalist[[i]],
seasonal = seasonallist[[j]],
method = "CSS-ML")
AICcs[i,j] = fit$aicc
if(fit$aicc < AICc){
AICc = fit$aicc
}
}, error = function(e) {
fit = list()
fit$aicc = NA
})
}
}
rownames(AICcs) = c("SARIMA(0,1,0)","SARIMA(1,1,0)","SARIMA(2,1,0)",
"SARIMA(0,1,1)","SARIMA(1,1,1)","SARIMA(2,1,1)",
"SARIMA(0,1,2)","SARIMA(1,1,2)","SARIMA(2,1,2)")
colnames(AICcs) = c("(1,1,1)","(2,1,1)","(3,1,1)",
"(1,1,2)","(2,1,2)","(3,1,2)",
"(1,1,3)","(2,1,3)","(3,1,3)")
knitr::kable(AICcs, caption = "AICcs of the candidate models")
AICc
library(forecast)
library(MASS)
library(tseries)
library(car)
library(dplyr)
library(tsdl)
data = tsdl[[122]]
attributes(tsdl[[122]])
train = ts(data[(12*5+1):(12*36)],frequency = 12,start = c(1960,1))
test = data[-(1:(12*36))]
autoplot(train,ylab = "million kilowatt hours") + ggtitle("Monthly electricity production in Australia")
#Box COx transformation
lambda = boxcox(train~1)
optlambda = lambda$x[which.max(lambda$y)]
train1 = (train^optlambda - 1)/optlambda
autoplot(train1) + ggtitle("transformaed data")
library(dplyr)
train2 = train1 %>% diff(lag=12) %>% diff(lag=1)
autoplot(train2)
adf.test(train2)
# sample ACF PACF plots
acf(train2,main = "Autocorrelation",lag.max = 60)
pacf(train2,main = "Partial Autocorrelation",lag.max = 60)
# model selection
AICc = 3000
arimalist = list(c(0,1,0),c(1,1,0),c(2,1,0),c(0,1,1),c(1,1,1),c(2,1,1),c(0,1,2),c(1,1,2),c(2,1,2))
seasonallist = list(c(1,1,1),c(2,1,1),c(3,1,1),c(1,1,2),c(2,1,2),c(3,1,2),c(1,1,3),c(2,1,3),c(3,1,3))
AICcs = matrix(NA,length(arimalist),length(seasonallist))
for(i in 1:length(arimalist)){
for(j in 1:length(seasonallist)){
result = tryCatch({
fit = Arima(train1,order=arimalist[[i]],
seasonal = seasonallist[[j]],
method = "CSS-ML")
AICcs[i,j] = fit$aicc
if(fit$aicc < AICc){
AICc = fit$aicc
}
}, error = function(e) {
fit = list()
fit$aicc = NA
})
}
}
rownames(AICcs) = c("SARIMA(0,1,0)","SARIMA(1,1,0)","SARIMA(2,1,0)",
"SARIMA(0,1,1)","SARIMA(1,1,1)","SARIMA(2,1,1)",
"SARIMA(0,1,2)","SARIMA(1,1,2)","SARIMA(2,1,2)")
colnames(AICcs) = c("(1,1,1)","(2,1,1)","(3,1,1)",
"(1,1,2)","(2,1,2)","(3,1,2)",
"(1,1,3)","(2,1,3)","(3,1,3)")
knitr::kable(AICcs, caption = "AICcs of the candidate models")
AICc
fit1 = Arima(train1,order=arimalist[[8]],
seasonal = seasonallist[[1]],method = "CSS-ML")
res = resid(fit1)
ggtsdisplay(res,lag.max = 40)
fit1 = Arima(train1,order=arimalist[[8]],
seasonal = seasonallist[[8]],method = "CSS-ML")
res = resid(fit1)
ggtsdisplay(res,lag.max = 40)
library(forecast)
library(MASS)
library(tseries)
library(car)
library(dplyr)
library(tsdl)
data = tsdl[[122]]
attributes(tsdl[[122]])
train = ts(data[(12*10+1):(12*36)],frequency = 12,start = c(1965,1))
test = data[-(1:(12*36))]
autoplot(train,ylab = "million kilowatt hours") + ggtitle("Monthly electricity production in Australia")
#Box COx transformation
lambda = boxcox(train~1)
optlambda = lambda$x[which.max(lambda$y)]
train1 = (train^optlambda - 1)/optlambda
autoplot(train1) + ggtitle("transformaed data")
library(dplyr)
train2 = train1 %>% diff(lag=12) %>% diff(lag=1)
autoplot(train2)
adf.test(train2)
# sample ACF PACF plots
acf(train2,main = "Autocorrelation",lag.max = 60)
pacf(train2,main = "Partial Autocorrelation",lag.max = 60)
# model selection
AICc = 3000
arimalist = list(c(0,1,0),c(1,1,0),c(2,1,0),c(0,1,1),c(1,1,1),c(2,1,1),c(0,1,2),c(1,1,2),c(2,1,2))
seasonallist = list(c(0,1,0),c(1,1,0),c(2,1,0),c(0,1,1),c(1,1,1),c(2,1,1),c(0,1,2),c(1,1,2),c(2,1,2))
AICcs = matrix(NA,length(arimalist),length(seasonallist))
for(i in 1:length(arimalist)){
for(j in 1:length(seasonallist)){
result = tryCatch({
fit = Arima(train1,order=arimalist[[i]],
seasonal = seasonallist[[j]],
method = "CSS-ML")
AICcs[i,j] = fit$aicc
if(fit$aicc < AICc){
AICc = fit$aicc
}
}, error = function(e) {
fit = list()
fit$aicc = NA
})
}
}
rownames(AICcs) = c("SARIMA(0,1,0)","SARIMA(1,1,0)","SARIMA(2,1,0)",
"SARIMA(0,1,1)","SARIMA(1,1,1)","SARIMA(2,1,1)",
"SARIMA(0,1,2)","SARIMA(1,1,2)","SARIMA(2,1,2)")
colnames(AICcs) = c("(0,1,0)","(0,1,1)","(0,1,2)",
"(1,1,0)","(1,1,1)","(1,1,2)",
"(2,1,0)","(2,1,1)","(2,1,2)")
knitr::kable(AICcs, caption = "AICcs of the candidate models")
AICc
fit1 = Arima(train1,order=arimalist[[4]],
seasonal = seasonallist[[4]],method = "CSS-ML")
res = resid(fit1)
ggtsdisplay(res,lag.max = 40)
fit1 = Arima(train1,order=arimalist[[4]],
seasonal = seasonallist[[5]],method = "CSS-ML")
res = resid(fit1)
ggtsdisplay(res,lag.max = 40)
fit1 = Arima(train1,order=arimalist[[4]],
seasonal = seasonallist[[6]],method = "CSS-ML")
res = resid(fit1)
ggtsdisplay(res,lag.max = 40)
fit1 = Arima(train1,order=arimalist[[4]],
seasonal = seasonallist[[7]],method = "CSS-ML")
res = resid(fit1)
ggtsdisplay(res,lag.max = 40)
fit1 = Arima(train1,order=arimalist[[4]],
seasonal = seasonallist[[8]],method = "CSS-ML")
res = resid(fit1)
ggtsdisplay(res,lag.max = 40)
fit1 = Arima(train1,order=arimalist[[4]],
seasonal = seasonallist[[9]],method = "CSS-ML")
res = resid(fit1)
ggtsdisplay(res,lag.max = 40)
fit1 = Arima(train1,order=arimalist[[4]],
seasonal = seasonallist[[4]],method = "CSS-ML")
res = resid(fit1)
ggtsdisplay(res,lag.max = 40)
fit1 = Arima(train1,order=arimalist[[8]],
seasonal = seasonallist[[4]],method = "CSS-ML")
res = resid(fit1)
ggtsdisplay(res,lag.max = 40)
fit1 = Arima(train1,order=arimalist[[4]],
seasonal = seasonallist[[4]],method = "CSS-ML")
res = resid(fit1)
ggtsdisplay(res,lag.max = 40)
fit1 = Arima(train1,order=arimalist[[5]],
seasonal = seasonallist[[4]],method = "CSS-ML")
res = resid(fit1)
ggtsdisplay(res,lag.max = 40)
fit1 = Arima(train1,order=arimalist[[4]],
seasonal = seasonallist[[4]],method = "CSS-ML")
res = resid(fit1)
ggtsdisplay(res,lag.max = 40)
library(forecast)
library(MASS)
library(tseries)
library(car)
library(dplyr)
library(tsdl)
data = tsdl[[122]]
attributes(tsdl[[122]])
train = ts(data[(12*12+1):(12*36)],frequency = 12,start = c(1967,1))
test = data[-(1:(12*36))]
autoplot(train,ylab = "million kilowatt hours") + ggtitle("Monthly electricity production in Australia")
#Box COx transformation
lambda = boxcox(train~1)
optlambda = lambda$x[which.max(lambda$y)]
train1 = (train^optlambda - 1)/optlambda
autoplot(train1) + ggtitle("transformaed data")
library(dplyr)
train2 = train1 %>% diff(lag=12) %>% diff(lag=1)
autoplot(train2)
adf.test(train2)
# sample ACF PACF plots
acf(train2,main = "Autocorrelation",lag.max = 60)
pacf(train2,main = "Partial Autocorrelation",lag.max = 60)
# model selection
AICc = 3000
arimalist = list(c(0,1,0),c(1,1,0),c(2,1,0),c(0,1,1),c(1,1,1),c(2,1,1),c(0,1,2),c(1,1,2),c(2,1,2))
seasonallist = list(c(0,1,0),c(1,1,0),c(2,1,0),c(0,1,1),c(1,1,1),c(2,1,1),c(0,1,2),c(1,1,2),c(2,1,2))
AICcs = matrix(NA,length(arimalist),length(seasonallist))
for(i in 1:length(arimalist)){
for(j in 1:length(seasonallist)){
result = tryCatch({
fit = Arima(train1,order=arimalist[[i]],
seasonal = seasonallist[[j]],
method = "CSS-ML")
AICcs[i,j] = fit$aicc
if(fit$aicc < AICc){
AICc = fit$aicc
}
}, error = function(e) {
fit = list()
fit$aicc = NA
})
}
}
rownames(AICcs) = c("SARIMA(0,1,0)","SARIMA(1,1,0)","SARIMA(2,1,0)",
"SARIMA(0,1,1)","SARIMA(1,1,1)","SARIMA(2,1,1)",
"SARIMA(0,1,2)","SARIMA(1,1,2)","SARIMA(2,1,2)")
colnames(AICcs) = c("(0,1,0)","(0,1,1)","(0,1,2)",
"(1,1,0)","(1,1,1)","(1,1,2)",
"(2,1,0)","(2,1,1)","(2,1,2)")
knitr::kable(AICcs, caption = "AICcs of the candidate models")
# model selection
AICc = 3000
arimalist = list(c(0,1,0),c(1,1,0),c(2,1,0),c(0,1,1),c(1,1,1),c(2,1,1),c(0,1,2),c(1,1,2),c(2,1,2))
seasonallist = list(c(0,1,0),c(1,1,0),c(2,1,0),c(0,1,1),c(1,1,1),c(2,1,1),c(0,1,2),c(1,1,2),c(2,1,2))
AICcs = matrix(NA,length(arimalist),length(seasonallist))
bestmodel = 1
for(i in 1:length(arimalist)){
for(j in 1:length(seasonallist)){
result = tryCatch({
fit = Arima(train1,order=arimalist[[i]],
seasonal = seasonallist[[j]],
method = "CSS-ML")
AICcs[i,j] = fit$aicc
if(fit$aicc < AICc){
AICc = fit$aicc
bestmodel = fit
}
}, error = function(e) {
fit = list()
fit$aicc = NA
})
}
}
rownames(AICcs) = c("SARIMA(0,1,0)","SARIMA(1,1,0)","SARIMA(2,1,0)",
"SARIMA(0,1,1)","SARIMA(1,1,1)","SARIMA(2,1,1)",
"SARIMA(0,1,2)","SARIMA(1,1,2)","SARIMA(2,1,2)")
colnames(AICcs) = c("(0,1,0)","(0,1,1)","(0,1,2)",
"(1,1,0)","(1,1,1)","(1,1,2)",
"(2,1,0)","(2,1,1)","(2,1,2)")
knitr::kable(AICcs, caption = "AICcs of the candidate models")
fit1 = bestmodel
res = resid(fit1)
ggtsdisplay(res,lag.max = 40)
fit1 = bestmodel
res = resid(fit1)
ggtsdisplay(res)
#Box Cox
lambda = boxcox(train~1)
optlambda = lambda$x[which.max(lambda$y)]
train1 = (train^optlambda - 1)/optlambda
autoplot(train1) + ggtitle("transformaed data")
library(dplyr)
train2 = train1 %>% diff(lag=12) %>% diff(lag=1)
autoplot(train2)
adf.test(train2)
autoplot(train1) + ggtitle("transformaed data")
library(dplyr)
train2 = train1 %>% diff(lag=12)
autoplot(train2)
adf.test(train2)
autoplot(train1) + ggtitle("transformaed data")
library(dplyr)
train2 = train1 %>% diff(lag=12)  %>% diff(lag=1)
autoplot(train2)
adf.test(train2)
bestmodel
AICc
fit1 = bestmodel
summary(fit1)
optlambda
-0.6714 * -0.7363
# check normality
hist(res)
qqnorm(res)
qqline(res)
shapiro.test(res)
length(train1)
sqrt(288)
# independence
pv = c()
pv[1]=Box.test(res, lag = 17, type = c("Box-Pierce"),fitdf = 2)$p.value
pv[2]=Box.test(res, lag = 17, type = c("Ljung-Box"),fitdf = 2)$p.value
pv[3]=Box.test(res^2, lag = 17, type = c("Ljung-Box"),fitdf = 0)$p.value
df = data.frame(tests = c("Box-Pierce","Ljung-Box","McLeod-Li"), p.value = pv, df = c(15,15,17))
knitr::kable(df)
length(test)
# Forecast
pred = predict(fit1, n.ahead=44)$pred
se = predict(fit1, n.ahead=44)$se
pred1 = exp(log(pred * optlambda + 1)/optlambda)
pred1l = exp(log((pred-1.96*se) * optlambda + 1)/optlambda)
pred1u = exp(log((pred+1.96*se) * optlambda + 1)/optlambda)
ts.plot(train, xlim = c(1969,1996))
points(1991+(1:44)/12,pred1,col = "red")
lines(1991+(1:44)/12,pred1l,lty=2)
lines(1991+(1:44)/12,pred1u,lty=2)
points(1991+(1:44)/12,test,col = "blue")
lines(1991+(1:44)/12,test,col = "blue",lty=2)
ts.plot(train, xlim = c(1992,1997), ylim =c(11000,17000),title = "Forecast 1994-1997 productions")
points(1994+(1:32)/12,pred1,col = "red")
ts.plot(train, xlim = c(1992,1997), ylim =c(11000,17000),title = "Forecast 1994-1997 productions")
points(1991+(1:44)/12,pred1,col = "red")
lines(1991+(1:44)/12,pred1l,lty=2)
lines(1991+(1:44)/12,pred1u,lty=2)
points(1991+(1:44)/12,test,col = "blue")
lines(1991+(1:44)/12,test,col = "blue",lty=2)
ts.plot(train, xlim = c(1990,1996), ylim =c(11000,17000),title = "Forecast 1994-1997 productions")
points(1991+(1:44)/12,pred1,col = "red")
lines(1991+(1:44)/12,pred1l,lty=2)
lines(1991+(1:44)/12,pred1u,lty=2)
points(1991+(1:44)/12,test,col = "blue")
lines(1991+(1:44)/12,test,col = "blue",lty=2)
ts.plot(train, xlim = c(1990,1996), ylim =c(11000,18000),title = "Forecast 1994-1997 productions")
points(1991+(1:44)/12,pred1,col = "red")
lines(1991+(1:44)/12,pred1l,lty=2)
lines(1991+(1:44)/12,pred1u,lty=2)
points(1991+(1:44)/12,test,col = "blue")
lines(1991+(1:44)/12,test,col = "blue",lty=2)
ts.plot(train, xlim = c(1990,1996), ylim =c(11000,18000),title = "Forecast 1994-1997 productions")
points(1991+(1:44)/12,pred1,col = "red",pct = "1")
lines(1991+(1:44)/12,pred1l,lty=2)
lines(1991+(1:44)/12,pred1u,lty=2)
points(1991+(1:44)/12,test,col = "blue",pct = "1")
lines(1991+(1:44)/12,test,col = "blue",lty=2)
ts.plot(train, xlim = c(1990,1996), ylim =c(11000,18000),title = "Forecast 1994-1997 productions")
points(1991+(1:44)/12,pred1,col = "red",pct = "2")
lines(1991+(1:44)/12,pred1l,lty=2)
lines(1991+(1:44)/12,pred1u,lty=2)
points(1991+(1:44)/12,test,col = "blue",pct = "2")
lines(1991+(1:44)/12,test,col = "blue",lty=2)
ts.plot(train, xlim = c(1990,1996), ylim =c(11000,18000),title = "Forecast 1994-1997 productions")
points(1991+(1:44)/12,pred1,col = "red",pct = "3")
lines(1991+(1:44)/12,pred1l,lty=2)
lines(1991+(1:44)/12,pred1u,lty=2)
points(1991+(1:44)/12,test,col = "blue",pct = "3")
lines(1991+(1:44)/12,test,col = "blue",lty=2)
?points
ts.plot(train, xlim = c(1990,1996), ylim =c(11000,18000),title = "Forecast 1994-1997 productions")
points(1991+(1:44)/12,pred1,col = "red",pch  = "3")
lines(1991+(1:44)/12,pred1l,lty=2)
lines(1991+(1:44)/12,pred1u,lty=2)
points(1991+(1:44)/12,test,col = "blue",pch  = "3")
lines(1991+(1:44)/12,test,col = "blue",lty=2)
ts.plot(train, xlim = c(1990,1996), ylim =c(11000,18000),title = "Forecast 1994-1997 productions")
points(1991+(1:44)/12,pred1,col = "red",pch  = 1)
lines(1991+(1:44)/12,pred1l,lty=2)
lines(1991+(1:44)/12,pred1u,lty=2)
points(1991+(1:44)/12,test,col = "blue",pch  = 1)
lines(1991+(1:44)/12,test,col = "blue",lty=2)
ts.plot(train, xlim = c(1990,1996), ylim =c(11000,18000),title = "Forecast 1994-1997 productions")
points(1991+(1:44)/12,pred1,col = "red",pch  = 2)
lines(1991+(1:44)/12,pred1l,lty=2)
lines(1991+(1:44)/12,pred1u,lty=2)
points(1991+(1:44)/12,test,col = "blue",pch  = 2)
lines(1991+(1:44)/12,test,col = "blue",lty=2)
ts.plot(train, xlim = c(1990,1996), ylim =c(11000,18000),title = "Forecast 1994-1997 productions")
points(1991+(1:44)/12,pred1,col = "red",pch  = 3)
lines(1991+(1:44)/12,pred1l,lty=2)
lines(1991+(1:44)/12,pred1u,lty=2)
points(1991+(1:44)/12,test,col = "blue",pch  = 3)
lines(1991+(1:44)/12,test,col = "blue",lty=2)
ts.plot(train, xlim = c(1990,1996), ylim =c(11000,18000),title = "Forecast 1994-1997 productions")
points(1991+(1:44)/12,pred1,col = "red",pch  = 4)
lines(1991+(1:44)/12,pred1l,lty=2)
lines(1991+(1:44)/12,pred1u,lty=2)
points(1991+(1:44)/12,test,col = "blue",pch  = 5)
lines(1991+(1:44)/12,test,col = "blue",lty=2)
ts.plot(train, xlim = c(1990,1996), ylim =c(11000,18000),title = "Forecast 1994-1997 productions")
points(1991+(1:44)/12,pred1,col = "red",pch  = 4)
lines(1991+(1:44)/12,pred1l,lty=2)
lines(1991+(1:44)/12,pred1u,lty=2)
points(1991+(1:44)/12,test,col = "blue",pch  = 6)
lines(1991+(1:44)/12,test,col = "blue",lty=2)
ts.plot(train, xlim = c(1990,1996), ylim =c(11000,18000),title = "Forecast 1994-1997 productions")
points(1991+(1:44)/12,pred1,col = "red",pch  = 4)
lines(1991+(1:44)/12,pred1l,lty=2)
lines(1991+(1:44)/12,pred1u,lty=2)
points(1991+(1:44)/12,test,col = "blue",pch  = 12)
lines(1991+(1:44)/12,test,col = "blue",lty=2)
ts.plot(train, xlim = c(1990,1996), ylim =c(11000,18000),title = "Forecast 1994-1997 productions")
points(1991+(1:44)/12,pred1,col = "red",pch  = 4)
lines(1991+(1:44)/12,pred1l,lty=2)
lines(1991+(1:44)/12,pred1u,lty=2)
points(1991+(1:44)/12,test,col = "blue",pch  = 46)
lines(1991+(1:44)/12,test,col = "blue",lty=2)
ts.plot(train, xlim = c(1990,1996), ylim =c(11000,18000),title = "Forecast 1994-1997 productions")
points(1991+(1:44)/12,pred1,col = "red",pch  = 4)
lines(1991+(1:44)/12,pred1l,lty=2)
lines(1991+(1:44)/12,pred1u,lty=2)
points(1991+(1:44)/12,test,col = "blue",pch  = 46,cex = 10)
lines(1991+(1:44)/12,test,col = "blue",lty=2)
ts.plot(train, xlim = c(1990,1996), ylim =c(11000,18000),title = "Forecast 1994-1997 productions")
points(1991+(1:44)/12,pred1,col = "red",pch  = 4)
lines(1991+(1:44)/12,pred1l,lty=2)
lines(1991+(1:44)/12,pred1u,lty=2)
points(1991+(1:44)/12,test,col = "blue",pch  = 46,cex = 3)
lines(1991+(1:44)/12,test,col = "blue",lty=2)
ts.plot(train, xlim = c(1990,1996), ylim =c(11000,18000),title = "Forecast 1994-1997 productions")
points(1991+(1:44)/12,pred1,col = "red",pch  = 46,cex = 3)
lines(1991+(1:44)/12,pred1l,lty=2)
lines(1991+(1:44)/12,pred1u,lty=2)
points(1991+(1:44)/12,test,col = "blue",pch  = 46,cex = 3)
lines(1991+(1:44)/12,test,col = "blue",lty=2)
knitr::opts_chunk$set(echo = FALSE,message = FALSE,warning = FALSE
)
ggtsdisplay(resid(fit),lag.max = 30)
knitr::opts_chunk$set(echo = FALSE,message = FALSE,warning = FALSE
)
library(forecast)
library(MASS)
library(car)
library(tseries)
library(ggplot2)
library(dplyr)
data = read.csv("DrySkimmilkproduction.csv",header  =T)
data = ts(data, frequency = 12,start = c(1995,1))
dairy_train = ts(data[1:(12*23)],frequency = 12,start = c(1995,1))
dairy_test = data[-(1:(12*23))]
head(data)
autoplot(dairy_train) + ggtitle("Dry Skim Milk Production data from USDA, 1995-2018")
lambda = boxcox(dairy_train~1)
optlambda = lambda$x[which.max(lambda$y)]
train1 = (dairy_train^optlambda - 1)/optlambda
train1  %>% diff(lag=12) %>%
autoplot() + ggtitle("Dry Skim Milk Production data, lag 12 difference")
train2 = train1 %>% diff(lag=12) %>% diff(lag=1)
autoplot(train2)+ ggtitle("Dry Skim Milk Production data, lag 12, lag 1 difference")
adf.test(train2)
# sample ACF PACF plots
par(mfrow = c(2,1))
acf(train2,main = "Autocorrelation",lag.max = 36)
pacf(train2,main = "Partial Autocorrelation",lag.max = 36)
# model selection via AICc
AICc = 9999
arimalist = list(c(0,1,0),c(1,1,0),c(2,1,0),c(0,1,1),c(1,1,1),c(2,1,1),c(0,1,2),c(1,1,2),c(2,1,2))
seasonallist = list(c(0,1,0),c(1,1,0),c(2,1,0),c(0,1,1),c(1,1,1),c(2,1,1),c(0,1,2),c(1,1,2),c(2,1,2))
AICcs = matrix(NA,length(arimalist),length(seasonallist))
for(i in 1:length(arimalist)){
for(j in 1:length(seasonallist)){
if((i == 6 & j == 3) | (i == 6 & j == 6) |
(i == 9 & j == 6)){
fit = list()
fit$aicc = NA
}
else{
fit = Arima(train1,order=arimalist[[i]],
seasonal = seasonallist[[j]],method = "CSS-ML")
AICcs[i,j] = fit$aicc
if(fit$aicc < AICc){
AICc = fit$aicc
}
}
}
}
