fit1 = bestmodel
summary(fit1)
fit2 =Arima(train1,order=c(1,1,1),
seasonal = c(2,1,1),
method = "CSS-ML")
fit2 =Arima(train1,order=c(1,1,1),
seasonal = c(2,1,2),
method = "CSS-ML")
knitr::opts_chunk$set(echo = FALSE,message = FALSE,warning = FALSE
)
library(forecast)
library(MASS)
library(tseries)
library(car)
library(dplyr)
library(ggplot2)
library(tsdl)
data = tsdl[[122]]
attributes(tsdl[[122]])
train = ts(data[(12*12+1):(12*36)],frequency = 12,start = c(1967,1))
test = data[-(1:(12*36))]
autoplot(train,ylab = "million kilowatt hours") + ggtitle("Monthly electricity production in Australia")
#Box Cox
lambda = boxcox(train~1)
optlambda = lambda$x[which.max(lambda$y)]
train1 = (train^optlambda - 1)/optlambda
autoplot(train1) + ggtitle("transformaed data")
library(dplyr)
train2 = train1 %>% diff(lag=12)  %>% diff(lag=1)
autoplot(train2)
adf.test(train2)
# sample ACF PACF plots
acf(train2, main = "Autocorrelation",lag.max = 48)
pacf(train2, main = "Partial Autocorrelation",lag.max = 48)
# model selection
AICc = 3000
arimalist = list(c(0,1,0),c(1,1,0),c(2,1,0),
c(3,1,0),c(0,1,1),c(1,1,1),c(2,1,1),c(3,1,1))
seasonallist = list(c(0,1,0),c(1,1,0),c(2,1,0),c(0,1,1),c(1,1,1),c(2,1,1),c(0,1,2),c(1,1,2),c(2,1,2))
AICcs = matrix(NA,length(arimalist),length(seasonallist))
bestmodel = 1
for(i in 1:length(arimalist)){
for(j in 1:length(seasonallist)){
result = tryCatch({
fit = Arima(train1,order=arimalist[[i]],
seasonal = seasonallist[[j]],
method = "CSS-ML")
AICcs[i,j] = fit$aicc
if(fit$aicc < AICc){
AICc = fit$aicc
bestmodel = fit
}
}, error = function(e) {
fit = list()
fit$aicc = NA
})
}
}
rownames(AICcs) = c("ARIMA(0,1,0)","ARIMA(1,1,0)","ARIMA(2,1,0)",
"ARIMA(3,1,0)","ARIMA(0,1,1)","ARIMA(1,1,1)",
"ARIMA(2,1,1)","ARIMA(3,1,1)")
colnames(AICcs) = c("(0,1,0)_12","(1,1,0)_12","(2,1,0)_12",
"(0,1,1)_12","(1,1,1)_12","(2,1,1)_12",
"(0,1,2)_12","(1,1,2)_12","(2,1,2)_12")
knitr::kable(AICcs, caption = "AICcs of the candidate models")
fit2 =Arima(train1,order=c(1,1,1),
seasonal = c(2,1,1),
method = "CSS-ML")
fit2 =Arima(train1,order=c(1,1,1),
seasonal = c(1,1,1),
method = "CSS-ML")
summary(fit2)
fit1 = bestmodel
summary(fit1)
fit2 =Arima(train1,order=c(1,1,1),
seasonal = c(1,1,2),
method = "CSS-ML")
summary(fit2)
fit2 =Arima(train1,order=c(0,1,1),
seasonal = c(1,1,2),
method = "CSS-ML")
summary(fit2)
fit2 =Arima(train1,order=c(0,1,1),
seasonal = c(1,1,1),
method = "CSS-ML")
summary(fit2)
fit2 =Arima(train1,order=c(0,1,1),
seasonal = c(1,1,1),
method = "CSS-ML")
summary(fit2)
-0.2*1/4
0 - 2 * -(0.05)
0.1 + -0.05 * 3
a = c(FALSE,FALSE)
b = c(FALSE,TRUE)
!q
!a
!a & !b
(6.8/6+7.7/6)^2 / (6.8^2 /(8^2*7)+(7.7^2/6^2/5))
(17.5-12.4) * qt(0.975, 13) * sqrt(6.8/8+7.7/6)
(17.5-12.4) - qt(0.975, 13) * sqrt(6.8/8+7.7/6)
(17.5-12.4) + qt(0.975, 13) * sqrt(6.8/8+7.7/6)
pt(0.419792,18)
pt(0.419792,17)
pt(0.41983,17)
1 - 2 *pt(-0.41983,17)
pt(-0.41983,17)
1 - pchisq(20000/23,23)
1 - pchisq(23*4,23)
1 - pchisq(23*2,23)
0.5347 - 0.3674
sqrt(0.45*(1-0.45)/200) * qnorm(0.99)
2 * sqrt(0.45*(1-0.45)/200) * qnorm(0.99)
(8*(1*0.3+2*0.42+3*0.13))
(22/12+50/15)^2 / ((22/12)^2/11 + (50/15)^2/14)
qt(0.95,24)
34*95/qchisq(0.025,34)
34*95/qchisq(0.975,34)
qnorm(0.99)*sqrt(120/15)
qt(0.99,14)*sqrt(120/15)
qnorm(0.99)*sqrt(120/15)
12 - sqrt(150/12) * qnorm(0.975)
12 - sqrt(150/12) * qt(0.975,11)
qt(0.95, 9)
(44-40)/ sqrt(15/10)
qt(0.90, 9)
pnorm(-2)
b = c(89,83,92,82,96,87,97,90,80)
a
a = c(113,103,84,87,111,86,90,89,92)
c = a - b
t.test(c,conf.level = 0.90)
13.8180576 + 0.7069465
1.6785 * 2 * sd(c) / sqrt(8)
sd(c)
c
1.6785 * 2 * sd(c) / sqrt(9)
qt(0.95,8) * 2 * sd(c) / sqrt(9)
(5.7 - 5)/(3/sqrt(30))
pt(-1.278019, 29)
pt(-1.28, 29)
pt(-1.28, 28)
pnorm(-1.28)
pnorm(-1.278)
pt(-1.278019, 30)
pt(-1.278019, 20)
pt(-1.278019, 40)
pt(-1.278019, 30)
pt(-1.278019, 30)
qt(0.95, 20)
qt(0.95, 30)
pnorm((3.8-5)/0.36)
dbinom(7,10,0.5)
qnorm(0.95) * sqrt(170/18)
pnorm((582-600)/10)
0.03593032*100
a
b
b = c(85, 83, 86, 84, 92, 96, 98, 90, 99, 87, 88, 95)
a = c (86,  83, 120, 105, 108,  90,  88,  94, 101, 114, 118, 107)
a
c = a - b
c
t.test(c, conf.level = 0.90)
18.498859-3.334475
(13/12+16/7) / ((13/12)^2/11 + (16/7)^2/6)
(13/12+16/7)^2 / ((13/12)^2/11 + (16/7)^2/6)
qt(0.95,11)
qt(0.95,12)
qt(0.95,11.61)
qt(0.95,12)
qt(0.95,17)
(9/8+10/11)^2 / ((9/8)^2/7 + (10/11)^2/10)
qt(0.975, 16) * sqrt((13/12+16/7)) + (64.1-69.2)
-qt(0.975, 16) * sqrt((13/12+16/7)) + (64.1-69.2)
-qt(0.975, 16) * sqrt((9/8+10/11)) + (64.1-69.2)
+qt(0.975, 16) * sqrt((9/8+10/11)) + (64.1-69.2)
qt(0.975,20)
qt(0.975,30)
(6.8/8+7.7/6)^2 / ((6.8/8)^2/7 + (7.7/6)^2/5)
qt(0.975, 11) * sqrt((6.8/8+7.7/6)) + (17.5-12.4)
-qt(0.975, 11) * sqrt((6.8/8+7.7/6)) + (17.5-12.4)
pchisq(0.975,34)
qchisq(0.975,34)
(34*95)/51.966
pnorm((18.5-18)/sqrt(0.25))
1-0.8413447
sp = 37.68
sp * sqrt(1/12 + 1/15)
t = 5.2 / 14.5934
t
pt(0.3563255,(12+15-2))
(11*22+14*50)/(12+15 - 2)
sqrt(37.68)
sqrt(1/12 + 1/15) * 6.138404
t = 5.2 / 2.377394
pt(t,(12+15-2))
1 - (1-0.9808554)*2
(7.1 - 5) / (3/sqrt(15))
pt(2.711088,14)
1- pt(2.711088,14)
1-pnorm(2.711088)
2 * qnorm(0.99) * sqrt(0.45*0.55)
2 * qnorm(0.99) * sqrt(0.45*0.55/200)*100
pchisq(400/7,35)
1-0.9895312
-1.018071 + 0.053144*45
knitr::opts_chunk$set(echo = FALSE,	error = FALSE,
message = FALSE,warning = FALSE
)
library(tsdl)
library(forecast)
library(car)
library(tseries)
library(MASS)
data = subset(tsdl,12)[[155]]
attributes(data)
t_train = ts(data[(1:(12*62))],frequency = 12,start = c(1907,1))
t_test = data[-(1:(12*62))]
ts.plot(t_train)
t_test
length(t_test)
t_train = ts(data[(1:(12*63))],frequency = 12,start = c(1907,1))
t_test = data[-(1:(12*63))]
ts.plot(t_train)
t_train = ts(data[(1:(12*63))],frequency = 12,start = c(1907,1))
t_test = data[-(1:(12*63))]
autoplot(t_train)
lambda = boxcox(t_train~1)
optlam = lambda$x[which.max(lambda$y)]
t_train1 = BoxCox(t_train,optlam)
lambda = boxcox(t_train~1)
optlam = lambda$x[which.max(lambda$y)]
t_train1 = BoxCox(t_train,optlam)
optlam
autoplot(t_train1)
t_train2 = diff(t_train1,lag=12)
autoplot(t_train2)
t_train2 = diff(t_train1,lag=12)
autoplot(t_train2)
adf.test(t_train2)
ggtsdisplay(t_train2,lag.max = 72)
# model selection via AICc of the model
AICc = 1500
arimalist = list(c(0,0,0),c(1,0,0),c(2,0,0),c(3,0,0),
c(0,0,1),c(1,0,1),c(2,0,1),c(3,0,1),
c(0,0,2),c(1,0,2),c(2,0,2),c(3,0,2),
c(0,0,3),c(1,0,3),c(2,0,3),c(3,0,3))
seasonallist = list(c(0,1,1),c(0,1,2),c(0,1,3),c(0,1,4),
c(1,1,1),c(1,1,2),c(1,1,3),c(1,1,4))
AICcs = matrix(0,length(arimalist),length(seasonallist))
minimumindex = c()
for(i in 1:length(arimalist)){
for(j in 1:length(seasonallist)){
fit = Arima(t_train1,order=arimalist[[i]],
seasonal = seasonallist[[j]],method = "CSS-ML")
AICcs[i,j] = fit$aicc
if(fit$aicc < AICc){
AICc = fit$aicc
minimumindex = c(i,j)
}
}
}
?Arima
# model selection via AICc of the model
AICc = 1500
arimalist = list(c(0,0,0),c(1,0,0),c(2,0,0),c(3,0,0),
c(0,0,1),c(1,0,1),c(2,0,1),c(3,0,1),
c(0,0,2),c(1,0,2),c(2,0,2),c(3,0,2),
c(0,0,3),c(1,0,3),c(2,0,3),c(3,0,3))
seasonallist = list(c(0,1,1),c(0,1,2),c(0,1,3),c(0,1,4),
c(1,1,1),c(1,1,2),c(1,1,3),c(1,1,4))
AICcs = matrix(0,length(arimalist),length(seasonallist))
minimumindex = c()
for(i in 1:length(arimalist)){
for(j in 1:length(seasonallist)){
fit = Arima(t_train1,order=arimalist[[i]],
seasonal = seasonallist[[j]],method = "ML")
AICcs[i,j] = fit$aicc
if(fit$aicc < AICc){
AICc = fit$aicc
minimumindex = c(i,j)
}
}
}
# model selection via AICc of the model
AICc = 1500
arimalist = list(c(1,0,1),c(2,0,1),c(3,0,1),
c(1,0,3),c(2,0,3),c(3,0,3))
seasonallist = list(c(0,1,1),c(0,1,2),c(0,1,3),c(0,1,4),
c(1,1,1),c(1,1,2),c(1,1,3),c(1,1,4))
AICcs = matrix(0,length(arimalist),length(seasonallist))
minimumindex = c()
for(i in 1:length(arimalist)){
for(j in 1:length(seasonallist)){
fit = Arima(t_train1,order=arimalist[[i]],
seasonal = seasonallist[[j]],method = "ML")
AICcs[i,j] = fit$aicc
if(fit$aicc < AICc){
AICc = fit$aicc
minimumindex = c(i,j)
}
}
}
# model selection via AICc of the model
AICc = 1500
arimalist = list(c(1,0,1),c(2,0,1),c(3,0,1),
c(1,0,3),c(2,0,3),c(3,0,3))
seasonallist = list(c(0,1,1),c(0,1,2),c(0,1,3),c(0,1,4),
c(1,1,3),c(1,1,4))
AICcs = matrix(0,length(arimalist),length(seasonallist))
minimumindex = c()
for(i in 1:length(arimalist)){
for(j in 1:length(seasonallist)){
fit = Arima(t_train1,order=arimalist[[i]],
seasonal = seasonallist[[j]],method = "CSS-ML")
AICcs[i,j] = fit$aicc
if(fit$aicc < AICc){
AICc = fit$aicc
minimumindex = c(i,j)
}
}
}
#AICc chart
rownames(AICcs) = c("ARIMA(1,0,1)","ARIMA(2,0,1)","ARIMA(3,0,1)",
"ARIMA(1,0,3)","ARIMA(2,0,3)","ARIMA(3,0,3)")
colnames(AICcs) = c("SARIMA(0,1,1)","SARIMA(0,1,2)","SARIMA(0,1,3)","SARIMA(0,1,4)",
"SARIMA(1,1,3)","SARIMA(1,1,4)")
knitr::kable(AICcs, caption = "AICc table of the models")
minimumindex
min(AICcs)
# model fitting
fit = Arima(t_train1,order=c(3,0,3),
seasonal = list(order=c(0,1,2),period=12),method = "CSS-ML")
summary(fit)
residual = resid(fit)
ggtsdisplay(residual)
?ggtsdisplay
residual = resid(fit)
ggtsdisplay(residual,ci.type = c("ma"))
residual = resid(fit)
ggtsdisplay(residual,ci.type = c("white"))
residual = resid(fit)
ggtsdisplay(residual,ci.type = c("ma"))
residual = resid(fit)
tsdisplay(residual,ci.type = c("ma"))
residual = resid(fit)
tsdisplay(residual,ci.type = c("white"))
residual = resid(fit)
tsdisplay(residual,ci.type = c("ma"))
residual = resid(fit)
tsdisplay(residual,ci.type = c("ma"),ci = 0.93)
residual = resid(fit)
tsdisplay(residual,ci.type = c("ma"),ci = 0.97)
residual = resid(fit)
tsdisplay(residual,ci.type = c("ma"),ci = 0.96)
residual = resid(fit)
ggtsdisplay(residual,ci.type = c("ma"),ci = 0.96)
residual = resid(fit)
tsdisplay(residual,ci.type = c("ma"),ci = 0.96)
residual = resid(fit)
tsdisplay(residual,ci.type = c("ma"),ci = cix)
cix = 0.96
residual = resid(fit)
tsdisplay(residual,ci.type = c("ma"),ci = cix)
# normality
gghistogram(resid(fit))
qqnorm(resid(fit))
qqline(resid(fit))
shapiro.test(resid(fit))
length(train)
length(t_train)
sqrt(756)
27.4-9
# independence tests
df = data.frame(Tests = c("Box-Pierce","Ljung-Box","McLeod-Li"), p_value =
c(Box.test(resid(fit), lag = 27, type = c("Box-Pierce"),fitdf = 8)$p.value,
Box.test(resid(fit), lag = 27, type = c("Ljung-Box"),fitdf = 8)$p.value,
Box.test(resid(fit)^2, lag = 27, type = c("Ljung-Box"),fitdf = 0)$p.value),
df = c(19,19,27))
knitr::kable(df, caption = "P value for independence tests")
polyroot(c(1,0.8170,0.1463,-0.5657))
polyroot(c(1,0.8170,0.1463,-0.5657))
abs(polyroot(c(1,0.8170,0.1463,-0.5657)))
polyroot(c(1,1.0035,0.3730,-0.4356))
polyroot(c(1,1.0035,0.3730,-0.4356))
abs(polyroot(c(1,1.0035,0.3730,-0.4356)))
polyroot(c(1,-1.0467,  +0.0640))
polyroot(c(1,-1.0467,  +0.0640))
abs(polyroot(c(1,-1.0467,  +0.0640)))
# Forecast
pred = predict(fit, n.ahead=length(t_test))$pred
se = predict(fit, n.ahead=length(t_test))$se
predOrigin = exp(log(pred * optlam + 1)/optlam)
predOriginlb = exp(log((pred-1.96*se) * optlam + 1)/optlam)
predOriginub = exp(log((pred+1.96*se) * optlam + 1)/optlam)
ts.plot(t_train, xlim = c(1968,1974),ylim = c(20,90),
ylab = "Temperature", main = "Forecast temperature from 1968 to 1973")
title(sub = "red predicted, blue true data, dashed line Confidence interval")
points(1969+(1:length(t_test))/12,predOrigin,col = "red")
lines(1969+(1:length(t_test))/12,predOriginlb,lty=2)
lines(1969+(1:length(t_test))/12,predOriginub,lty=2)
points(1969+(1:length(t_test))/12,t_test,col = "blue")
lines(1969+(1:length(t_test))/12,t_test,col = "blue")
# Forecast
pred = predict(fit, n.ahead=length(t_test))$pred
se = predict(fit, n.ahead=length(t_test))$se
predOrigin = exp(log(pred * optlam + 1)/optlam)
predOriginlb = exp(log((pred-1.96*se) * optlam + 1)/optlam)
predOriginub = exp(log((pred+1.96*se) * optlam + 1)/optlam)
ts.plot(t_train, xlim = c(1967,1973),ylim = c(20,90),
ylab = "Temperature", main = "Forecast temperature from 1968 to 1973")
title(sub = "red predicted, blue true data, dashed line Confidence interval")
points(1969+(1:length(t_test))/12,predOrigin,col = "red")
lines(1969+(1:length(t_test))/12,predOriginlb,lty=2)
lines(1969+(1:length(t_test))/12,predOriginub,lty=2)
points(1969+(1:length(t_test))/12,t_test,col = "blue")
lines(1969+(1:length(t_test))/12,t_test,col = "blue")
# Forecast
pred = predict(fit, n.ahead=length(t_test))$pred
se = predict(fit, n.ahead=length(t_test))$se
predOrigin = exp(log(pred * optlam + 1)/optlam)
predOriginlb = exp(log((pred-1.96*se) * optlam + 1)/optlam)
predOriginub = exp(log((pred+1.96*se) * optlam + 1)/optlam)
ts.plot(t_train, xlim = c(1967,1973),ylim = c(20,90),
ylab = "Temperature", main = "Forecast temperature from 1968 to 1973")
title(sub = "red predicted, blue true data, dashed line Confidence interval")
points(1970+(1:length(t_test))/12,predOrigin,col = "red")
lines(1970+(1:length(t_test))/12,predOriginlb,lty=2)
lines(1970+(1:length(t_test))/12,predOriginub,lty=2)
points(1970+(1:length(t_test))/12,t_test,col = "blue")
lines(1970+(1:length(t_test))/12,t_test,col = "blue")
# Forecast
pred = predict(fit, n.ahead=length(t_test))$pred
se = predict(fit, n.ahead=length(t_test))$se
predOrigin = exp(log(pred * optlam + 1)/optlam)
predOriginlb = exp(log((pred-1.96*se) * optlam + 1)/optlam)
predOriginub = exp(log((pred+1.96*se) * optlam + 1)/optlam)
ts.plot(t_train, xlim = c(1967,1974),ylim = c(20,90),
ylab = "Temperature", main = "Forecast temperature from 1968 to 1973")
title(sub = "red predicted, blue true data, dashed line Confidence interval")
points(1970+(1:length(t_test))/12,predOrigin,col = "red")
lines(1970+(1:length(t_test))/12,predOriginlb,lty=2)
lines(1970+(1:length(t_test))/12,predOriginub,lty=2)
points(1970+(1:length(t_test))/12,t_test,col = "blue")
lines(1970+(1:length(t_test))/12,t_test,col = "blue")
knitr::opts_chunk$set(echo = FALSE,message = FALSE,warning = FALSE
)
library(forecast)
library(forecast)
library(MASS)
library(tseries)
library(car)
library(dplyr)
library(ggplot2)
library(tsdl)
install.packages("tsdl")
library(forecast)
library(MASS)
library(tseries)
library(car)
library(dplyr)
library(ggplot2)
library(tsdl)
library(forecast)
library(MASS)
library(tseries)
library(car)
library(dplyr)
library(ggplot2)
library(tsdl)
install.packages("devtools")
devtools::install_github("FinYang/tsdl")
library(forecast)
library(MASS)
library(tseries)
library(car)
library(dplyr)
library(ggplot2)
library(tsdl)
data = tsdl[[122]]
attributes(tsdl[[122]])
train = ts(data[(12*12+1):(12*36)],frequency = 12,start = c(1967,1))
test = data[-(1:(12*36))]
tsdl[[122]]
data
write.csv(data, "TSA_electicity.csv")
# Create sequence of dates from Jan 1956 to Aug 1995
dates <- seq(as.Date("1956-01-01"), as.Date("1995-08-01"), by="months")
# Create data frame
df <- data.frame(
year = format(dates, "%Y"),
month = format(dates, "%m"),
value = data
)
# View first few rows of the data frame
head(df)
df
df[-10:]
write.csv(df, "TSA_electicity.csv")
?write.csv
# Create sequence of dates from Jan 1956 to Aug 1995
dates <- seq(as.Date("1956-01-01"), as.Date("1995-08-01"), by="months")
# Create data frame
df <- data.frame(
year = format(dates, "%Y"),
month = format(dates, "%m"),
value = data
)
# View first few rows of the data frame
head(df)
write.csv(df, "TSA_electicity.csv",row.names=FALSE)
